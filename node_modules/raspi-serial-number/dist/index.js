"use strict";var __importDefault=this&&this.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(exports,"__esModule",{value:!0});var fs_1=__importDefault(require("fs"));function isFunc(r){return!!r&&"[object Function]"==={}.toString.call(r)}function filterSerialNumber(r){var e=r.split(/\r\n|\n/).filter(function(r){return 0===r.indexOf("Serial")});if(e.length<=0)throw"Couldn't read the Serial number. Are you sure you're running this script on a Raspberry Pi?";var i=e[0].match(/^Serial\s*:\s*([0-9a-f]+)$/i);if(!i||i.length<=0)throw"Serial has invalid format. Are you sure you're running this script on a Raspberry Pi?";return i[1].replace(/^0+/,"")}function getSerialNumber(r){var e,i,t,n=void 0;r&&isFunc(r)?(e=function(e,i){try{var t=void 0;"string"==typeof i&&(t=filterSerialNumber(i)),r(e,t)}catch(e){r(e)}},n=void 0):(n=new Promise(function(r,e){i=r,t=e}),e=function(r,e){if(r)t(r);else try{i(void 0===e?void 0:filterSerialNumber(e))}catch(r){t(r)}});try{fs_1.default.readFile("/proc/cpuinfo","ascii",function(r,i){e(r,i)})}catch(r){e(r)}return n}function getSerialNumberSync(){return filterSerialNumber(fs_1.default.readFileSync("/proc/cpuinfo","ascii"))}exports.getSerialNumber=getSerialNumber,exports.getSerialNumberSync=getSerialNumberSync;